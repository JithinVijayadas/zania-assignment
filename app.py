import streamlit as st
from modules.question_answering import process_pdf
import logging

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)



# Streamlit app
def main():
    """
    Main function to run the Streamlit app for PDF Q&A.

    This function sets up the Streamlit interface, allowing users to upload a PDF,
    input questions, and receive answers generated by an AI model based on the content
    of the uploaded PDF.

    The app includes:
    - A title and subtitle.
    - A file uploader for the PDF.
    - Text input for user instructions.
    - Dynamic text inputs for questions.
    - Buttons to add more questions and submit the form.

    The answers are displayed below each question after submission.
    """
    st.title("PDF Q&A Application")
    st.subheader("submitted by JITHIN")
    uploaded_file = st.file_uploader("Upload a PDF", type="pdf")
    user_instruction = st.text_input("User Instruction", "Give the answers in bullet points")
    
    if 'questions' not in st.session_state:
        st.session_state.questions = [""]
    
    # Display the current questions
    for i, question in enumerate(st.session_state.questions):
        st.session_state.questions[i] = st.text_input(f"Enter your question {i+1}", value=question, key=f"question_{i}")
    
    # Button to add another question
    if st.button("Add another question"):
        st.session_state.questions.append("")
    
    # Form to submit the questions and process the PDF
    if st.button("Submit"):
        if uploaded_file is not None and st.session_state.questions:
            with open("uploaded_file.pdf", "wb") as f:
                f.write(uploaded_file.getbuffer())
            answers = process_pdf("uploaded_file.pdf", st.session_state.questions, user_instruction)
            for q, a in answers.items():
                st.write(f"**Question:** {q}")
                st.write(f"**Answer:** {a}")
                logger.info(f"Question: {q} | Answer: {a}")

if __name__ == "__main__":
    main()